simulatedData=replicate(1000,simTrialjudge(5))
file = 'C:/Users/91630/Desktop/court.csv'
courtData = read.csv(file, header = TRUE)
head(courtData, 10)
simTrialjudge=function(n){
jcp=apply(courtData,2,mean)
jicp=1-jcp
s=c(1,0)
court_decision=vector('integer',n)
for (j in 1:n) {
court_decision[j]=sample(s,1,p=c(jcp[j],jicp[j]))
}
return(court_decision)
}
checkEvent=function(data){
if(sum(data) <=2){
return(1)
}
else{
return(0)}
}
simulatedData=replicate(1000,simTrialjudge(5))
mean(apply(simulatedData,2,checkEvent))
checkEvent=function(data){
if(sum(data) <=2){
return(1)
}
else{
return(0)}
}
simulatedData=replicate(1000,simTrialjudge(5))
mean(apply(simulatedData,2,checkEvent))
simulatedData=replicate(1000,simTrialjudge(5))
mean(apply(simulatedData,2,checkEvent))
simulatedData=replicate(1000,simTrialjudge(5))
mean(apply(simulatedData,2,checkEvent))
simulatedData=replicate(1000,simTrialjudge(5))
mean(apply(simulatedData,2,checkEvent))
simulatedData=replicate(1000,simTrialjudge(5))
mean(apply(simulatedData,2,checkEvent))
simulatedData=replicate(1000,simTrialjudge(5))
mean(apply(simulatedData,2,checkEvent))
simTrialjudge=function(n){
jcp=apply(courtData,2,mean)
jicp=1-jcp
s=c(1,0)
court_decision=vector('integer',n)
for (j in 1:n) {
court_decision[j]=sample(s,1,p=c(jcp[j],jicp[j]))
}
return(court_decision)
}
checkEvent=function(data){
if(sum(data) <=2){
return(1)
}
else{
return(0)}
}
simulatedData=replicate(1000000,simTrialjudge(5))
#file = 'http://openmv.net/file/food-texture.csv'
file = 'Data/food-texture.csv'
foodData = read.csv(file, header = TRUE, row.names = 1, stringsAsFactors = FALSE)
setwd("W:/Msis/APS")
#file = 'http://openmv.net/file/food-texture.csv'
file = 'Data/food-texture.csv'
foodData = read.csv(file, header = TRUE, row.names = 1, stringsAsFactors = FALSE)
#file = 'http://openmv.net/file/food-texture.csv'
file = 'Data/food-texture.csv'
foodData = read.csv(file, header = TRUE, row.names = 1, stringsAsFactors = FALSE)
setwd("W:/Msis/APS/Codes/Data")
#file = 'http://openmv.net/file/food-texture.csv'
file = 'Data/food-texture.csv'
foodData = read.csv(file, header = TRUE, row.names = 1, stringsAsFactors = FALSE)
setwd("W:/Msis/APS/Codes/Data")
#file = 'http://openmv.net/file/food-texture.csv'
file = 'food-texture.csv'
foodData = read.csv(file, header = TRUE, row.names = 1, stringsAsFactors = FALSE)
head(foodData, 5)
foodData$Oil
foodData[['Oil']]
foodData[, 'Oil']
foodData['Oil']
foodData[1, 'Oil']
foodData['B110', 'Oil']
foodData$Oil
foodData[['Oil']]
foodData[, 'Oil']
foodData['Oil']
foodData[1, 'Oil']
foodData['B110', 'Oil']
mean(foodData[oil])
mean(foodData['oil'])
mean(foodData[['oil']])
mean(foodData[['oil']])
mean(foodData[['Oil']])
mean(foodData[['Oil']])
mean(foodData[['Oil']])
mean(foodData[['Oil']])
mean(foodData[['Oil']])
foodData[c('Oil' , 'Density')]
foodData[[c('Oil' , 'Density')]]
foodData$Oil
foodData[['Oil']]
foodData[, 'Oil']
foodData['Oil']
foodData[1, 'Oil']
foodData['B110', 'Oil']
foodData[c('Oil', 'Density')]
foodData %>% select(c(Oil, Density))
foodData[c('Oil', 'Density')]
foodData %>% select(c(Oil, Density))
foodData %>% select(c(Oil, Density))
library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)
foodData %>% select(c(Oil, Density))
foodData %>% select(c(Oil, Density))
foodData %>% select(-c(Oil, Density))
#foodData[-c('Oil', 'Density')]
foodData[-c('Oil', 'Density')]
foodData[1, 'Oil']
foodData[2, 'Oil']
foodData[, 'Oil']
foodData[['Oil']]
foodData$Oil
foodData['Oil']
foodData['B110', 'Oil']
nrow(foodData)
ncol(foodData)
colnames(foodData)
rownames(foodData)
foodData[foodData$Oil>17,]
foodData[foodData$Oil>17]
foodData[foodData$Oil>17,]
foodData%>%filter(Oil >18)
foodData[foodData[['Oil']]>17,]
foodData[foodData[['Oil']]>17,c('Crispy' , 'Hardness')]
foodData[foodData[['Oil']]>17,c('Crispy' , 'Hardness')]
foodData[c('Oil', 'Density')]
foodData %>% select(c(Oil, Density))
#foodData[-c('Oil', 'Density')]
foodData %>% select(-c(Oil, Density))
foodData%>%filter(Oil >18)
foodData%>%filter(Oil>18) %>%select(c('Crispy))
foodData%>%filter(Oil >18)
foodData%>%filter(Oil>18) %>%select(c(Crispy))
foodData%>%filter(Oil >18)
foodData%>%filter(Oil>18) %>%select(Crispy)
foodData%>%filter(Oil>18) %>%select(Crispy)
foodData%>%filter(Oil >18)
foodData%>%filter(Oil>18) %>% select(Crispy)
foodData%>%filter(Oil >18)
foodData %>% filter(Oil >18)
foodData%>%filter(Oil>18) %>% select(Crispy)
foodData %>% filter(Oil >18)
>foodData %>% filter(Oil >18)
# Chunk 1
library(ggplot2)
library(dplyr)
# Chunk 2
myvector1 = c(1, 2, 3) # a vector of integers/numeric?
myvector2 = c('a', 'b', 'c') # a vector of characters
end()
foodData %>% filter(Oil >18)
foodData %>% filter(Oil >18)
foodData%>%filter(Oil>18) %>% select(Crispy)
(foodData$Oil == 9) || (foodData$Density == 15)
(foodData$Oil == 9) || (foodData$Crispy == 15)
(foodData$Oil == 9) | (foodData$Crispy == 15)
(foodData$Oil == 9) & (foodData$Crispy == 15)
foodData %>% filter(Crispy %in% c(9,15))
foodData %>% filter(Crispy %in% c(9,15,16))
foodData %>% filter(Crispy %in% c(9,15,))
foodData %>% filter(!(Crispy %in% c(9,15,)))
foodData %>% filter(!(Crispy %in% c(9,15)))
foodData %>% filter(!(Crispy %in% c(9,25)))
foodData %>% filter(Crispy %in% c(9,25))
foodData %>% filter(Crispy %in% c(9,15))
foodData %>% filter(Crispy %in% c(9,12))
foodData%>%mutate(Densitynew = Density*2)
foodData%>%mutate(Densitynew = Density/2)
foodData%>%mutate(Densitynew = Density/2)
colnames(foodData)
foodData %>% mutate(Crispylevel = ifelse(Crispy > 11 ,1,0))
str(foodData)
fooData=foodData %>% mutate(Crispylevel = ifelse(Crispy > 11 ,1,0))
str(foodData)
foodData=foodData %>% mutate(Crispylevel = ifelse(Crispy > 11 ,1,0))
str(foodData)
foodData=foodData%>%mutate(Densitynew = Density/2)
colnames(foodData)
str(foodData)
foodData=foodData %>% mutate(Crispylevel = ifelse(Crispy > 11 ,1,0))
foodData=foodData %>% mutate(Crispylevel = ifelse(Crispy > 11 ,high , low))
foodData=foodData %>% mutate(Crispylevel = ifelse(Crispy > 11 ,1,0))
foodData=foodData %>% mutate(Crispylevel = ifelse(Crispy > 11 ,'High' , 'Low'))
foodData=foodData %>% mutate(Crispylevel = ifelse(Crispy > 11 ,'High' , 'Low'))
foodData=foodData %>% mutate(Crispylevel = ifelse(Crispy > 11 ,'High' , 'Low'))
fooData
foodData=foodData %>% mutate(Crispylevel = ifelse(Crispy > 11 ,1,0))
foodData=foodData %>% mutate(Crispylevel = ifelse(Crispy > 11 ,'High' , 'Low'))
foodData
categorical_cols = c('Crispy', 'Crispylevel')
categorical_cols = c('Crispy', 'Crispylevel')
foodData[categorical_cols] = lapply(?, ?)
categorical_cols = c('Crispy', 'Crispylevel')
categorical_cols
apply(x,2,sum)
myvector1 = c(1, 2, 3) # a vector of integers/numeric?
myvector2 = c('a', 'b', 'c') # a vector of characters
myvector3 = c(TRUE, FALSE, FALSE) # a vector of booleans
myvector4 = c(1.5, 2.5, 3.5) # a vector of numerics
myvector5 = 1:10 # creates a vector comprising 1 through 10
myvector6 = seq(1, 10, by = 0.5) # Creates a vector comprising 1, 1.5, 2.0 etc
print(myvector1)
print(myvector2)
print(myvector3)
print(myvector4)
print(myvector5)
print(myvector6)
mymatrix1 = matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, ncol = 3)
mymatrix2 = matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, ncol = 3, byrow = TRUE)
print(mymatrix1)
print(mymatrix2)
x=matrix(c(1))
apply(x,2,sum)
lapply(foodData,sum)
lapply(foodData,[categorical_cols],as.factor)
lapply(foodData[categorical_cols],as.factor)
str(foodData)
categorical_cols = c('Crispy', 'Crispylevel')
str(foodData)
#lapply(foodData[categorical_cols],as.factor)
foodData[categorical_cols] = lapply(categorical_cols, as.factor)
str(foodData)
categorical_cols = c('Crispy', 'Crispylevel')
str(foodData)
lapply(foodData[categorical_cols],as.factor)
#foodData[categorical_cols] = lapply(categorical_cols, as.factor)
str(foodData)
categorical_cols = c('Crispy', 'Crispylevel')
str(foodData)
lapply(foodData[categorical_cols],as.factor)
#foodData[categorical_cols] = lapply(categorical_cols, as.factor)
str(foodData)
dBat = read.csv('Data/bats.csv', header = FALSE, stringsAsFactors = TRUE)
dBat = read.csv('bats.csv', header = FALSE, stringsAsFactors = TRUE)
head(dBat)
dBat = read.csv('bats.csv', header = FALSE, stringsAsFactors = TRUE)
head(dBat,10)
dBat = read.csv('bats.csv', header = TRUE,roew.names=1 , stringsAsFactors = TRUE)
dBat = read.csv('bats.csv', header = True,roew.names=1 , stringsAsFactors = TRUE)
dBat = read.csv('bats.csv', header = True,roew.names=1 , stringsAsFactors = TRUE)
dBat = read.csv('bats.csv', header = True,roew.names=1 , stringsAsFactors = TRUE)
dBat = read.csv('bats.csv', header = True,row.names=1 , stringsAsFactors = TRUE)
dBat = read.csv('bats.csv', header = TRUE,row.names=1 , stringsAsFactors = TRUE)
head(dBat)
myvector1 = c(1, 2, 3) # a vector of integers/numeric?
myvector2 = c('a', 'b', 'c') # a vector of characters
myvector3 = c(TRUE, FALSE, FALSE) # a vector of booleans
myvector4 = c(1.5, 2.5, 3.5) # a vector of numerics
myvector5 = 1:10 # creates a vector comprising 1 through 10
myvector6 = seq(1, 10, by = 0.5) # Creates a vector comprising 1, 1.5, 2.0 etc
print(myvector1)
print(myvector2)
print(myvector3)
print(myvector4)
print(myvector5)
print(myvector6)
mymatrix1 = matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, ncol = 3)
mymatrix2 = matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, ncol = 3, byrow = TRUE)
print(mymatrix1)
print(mymatrix2)
mylist1 = list(1, 'Name', c('Math', 'Physics', 'Chemistry'))
print(mylist1)
str(foodData)
nrow(foodData)
ncol(foodData)
colnames(foodData)
rownames(foodData)
foodData$Oil
foodData[['Oil']]
foodData[, 'Oil']
foodData['Oil']
foodData[1, 'Oil']
foodData['B110', 'Oil']
foodData[c('Oil', 'Density')]
foodData %>% select(c(Oil, Density))
#foodData[-c('Oil', 'Density')]
foodData %>% select(-c(Oil, Density))
dBat = read.csv('bats.csv', header = TRUE,row.names=1 , stringsAsFactors = TRUE)
head(dBat)
head(dBat,1)
head(dBat,)
head(dBat,1)
foodData %>% filter(Oil >18)
foodData%>%filter(Oil>18) %>% select(Crispy)
foodData %>% filter(Crispy %in% c(9,15))
foodData %>% filter(!(Crispy %in% c(9,15)))
data <- data.frame(
A = c(TRUE, FALSE, TRUE),
B = c(FALSE, TRUE, TRUE),
C = c(TRUE, TRUE, FALSE)
)
# Select True values from the first row
true_values <- data[1, ][data[1, ] == TRUE]
# Print the selected values
print(true_values)
head(dBat,1)
true_values <- dBat[1, ][dBat[1, ] == TRUE]
head(dBat,1)
true_values <- dBat[1, ][dBat[1, ] == TRUE]
print(true_values)
dBat[1, ]
dBat[2, ]
dBat[,1 ]
head(dBat,1)
true_values <- dBat[1, ][dBat[1, ] == TRUE]
print(true_values)
dBat[1, ]
